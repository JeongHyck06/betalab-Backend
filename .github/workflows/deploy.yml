# 워크플로우의 이름을 지정합니다.
name: CI/CD with AWS ECR and EC2

# 워크플로우가 언제 실행될지를 정의합니다.
on:
  push:
    branches: [ "main" ] # main 브랜치에 push가 발생했을 때 실행됩니다.

# 실행될 작업(job)들을 정의합니다.
jobs:
  build-and-deploy:
    # 작업이 실행될 환경을 지정합니다. (최신 우분투)
    runs-on: ubuntu-latest

    # 작업의 순차적인 단계(step)들을 정의합니다.
    steps:
      # 1. 소스 코드 체크아웃
      - name: Checkout source code
        uses: actions/checkout@v3

      # 2. JDK 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Gradle 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # 4. Gradle로 빌드 (테스트는 생략)
      - name: Build with Gradle
        run: ./gradlew build -x test

      # 5. AWS 인증 정보 설정
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 6. Amazon ECR에 로그인
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # 7. Docker 이미지 빌드 및 ECR에 푸시
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }} # 커밋 해시를 이미지 태그로 사용
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # 8. EC2에 접속하여 배포
      - name: Deploy to EC2 instance
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # 1. AWS CLI를 사용하여 ECR에 로그인 (EC2에 부여된 IAM 역할 권한을 사용)
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

            # 2. 기존 앱 컨테이너가 있으면 중지 및 삭제
            docker stop my-app || true
            docker rm my-app || true
            
            # 3. ECR에서 최신 이미지 pull
            docker pull ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}
            
            # 4. 새 컨테이너 실행 (환경 변수로 DB 정보 전달)
            docker run -d --name my-app -p 8080:8080 \
              -e DB_HOST=${{ secrets.DB_HOST }} \
              -e DB_USERNAME=${{ secrets.DB_USERNAME }} \
              -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
              -e DB_NAME=mydatabase \
              ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}
            # 기존 앱 컨테이너가 있으면 중지 및 삭제
            docker stop my-app || true
            docker rm my-app || true
            
            # ECR에서 최신 이미지 pull
            docker pull ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}
            
            # 새 컨테이너 실행 (환경 변수로 DB 정보 전달)
            docker run -d --name my-app -p 8080:8080 \
              -e DB_HOST=${{ secrets.DB_HOST }} \
              -e DB_USERNAME=${{ secrets.DB_USERNAME }} \
              -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
              -e DB_NAME=mydatabase \
              ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}
